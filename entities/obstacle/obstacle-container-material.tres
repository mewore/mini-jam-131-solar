[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=9]
code = "shader_type canvas_item;

uniform vec4 outline_color : hint_color = vec4(1.0, 0.0, 0.0, 1.0);

void fragment() {
    vec2 texcoord = SCREEN_UV;
    vec4 color = texture(TEXTURE, texcoord);

    vec2 pixel_size = TEXTURE_PIXEL_SIZE;
    // Only if the alpha value is less than 1, draw an outline
    if (color.a < 0.5) {
        // Check if any of the neighboring pixels are opaque
        bool left_alpha = texture(TEXTURE, texcoord + vec2(-pixel_size.x, 0)).a > 0.5;
        bool right_alpha = texture(TEXTURE, texcoord + vec2(pixel_size.x, 0)).a > 0.5;
        bool top_alpha = texture(TEXTURE, texcoord + vec2(0, -pixel_size.y)).a > 0.5;
        bool bottom_alpha = texture(TEXTURE, texcoord + vec2(0, pixel_size.y)).a > 0.5;
        bottom_alpha = bottom_alpha || texture(TEXTURE, texcoord + vec2(0, 2.0 * pixel_size.y)).a > 0.5;
        bottom_alpha = bottom_alpha || texture(TEXTURE, texcoord + vec2(0, -2.0 * pixel_size.y)).a > 0.5;
        bottom_alpha = bottom_alpha || texture(TEXTURE, texcoord + vec2(2.0 * pixel_size.x, 0)).a > 0.5;
        bottom_alpha = bottom_alpha || texture(TEXTURE, texcoord + vec2(-2.0 * pixel_size.x, 0)).a > 0.5;
        bottom_alpha = bottom_alpha || texture(TEXTURE, texcoord + vec2(0, 3.0 * pixel_size.y)).a > 0.5;
        bottom_alpha = bottom_alpha || texture(TEXTURE, texcoord + vec2(0, -3.0 * pixel_size.y)).a > 0.5;
        bottom_alpha = bottom_alpha || texture(TEXTURE, texcoord + vec2(3.0 * pixel_size.x, 0)).a > 0.5;
        bottom_alpha = bottom_alpha || texture(TEXTURE, texcoord + vec2(-3.0 * pixel_size.x, 0)).a > 0.5;

        // If the current pixel is transparent and has an opaque neighbor, draw the outline
        if (left_alpha || right_alpha || top_alpha || bottom_alpha) {
            // Draw the outline
            color = outline_color;
        }
    }

    // Output the final color
    COLOR = color;
}"

[resource]
shader = SubResource( 9 )
shader_param/outline_color = Color( 1, 0, 0, 1 )
